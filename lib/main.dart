import 'package:flutter/material.dart';
import 'Favorites.dart';
import 'settings.dart';
import 'dart:ui';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo[600]!),
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.indigo,
          foregroundColor: Colors.white,
        ),
        bottomNavigationBarTheme: BottomNavigationBarThemeData(
          backgroundColor: Colors.indigo,
          selectedItemColor: Colors.white,
          unselectedItemColor: Colors.white70,
        ),
      ),
      home: MyHomePage(title: 'üçé Home'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

// MyHomeContent ‡πÄ‡∏õ‡πá‡∏ô StatelessWidget ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
//‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö List ‡∏Ç‡∏≠‡∏á Map ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ Map ‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏û‡∏•‡∏±‡∏á, ‡πÅ‡∏•‡∏∞ emoji
class MyHomeContent extends StatelessWidget {
  final List<Map<String, String>> fruits = [
    {
      'name': 'Gomu Gomu no Mi',
      'type': 'Paramecia',
      'power': '‡∏¢‡∏≤‡∏á‡∏¢‡∏∑‡∏î',
      'emoji': 'üçé',
    },
    {'name': 'Mera Mera no Mi', 'type': 'Logia', 'power': '‡πÑ‡∏ü', 'emoji': 'üçé'},
    {
      'name': 'Hie Hie no Mi',
      'type': 'Logia',
      'power': '‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á',
      'emoji': 'üçé',
    },
    {
      'name': 'Yami Yami no Mi',
      'type': 'Logia',
      'power': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î',
      'emoji': 'üçé',
    },
    {
      'name': 'Suna Suna no Mi',
      'type': 'Logia',
      'power': '‡∏ó‡∏£‡∏≤‡∏¢',
      'emoji': 'üçé',
    },
    {
      'name': 'Ope Ope no Mi',
      'type': 'Paramecia',
      'power': '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î',
      'emoji': 'üçé',
    },
    {'name': 'Tori Tori no Mi', 'type': 'Zoan', 'power': '‡∏ô‡∏Å', 'emoji': 'üçé'},
    {
      'name': 'Uo Uo no Mi',
      'type': 'Mythical Zoan',
      'power': '‡∏°‡∏±‡∏á‡∏Å‡∏£',
      'emoji': 'üçé',
    },
    {
      'name': 'Bara Bara no Mi',
      'type': 'Paramecia',
      'power': '‡πÅ‡∏¢‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô',
      'emoji': 'üçé',
    },
  ];

  Color getTypeColor(String type) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏õ‡∏µ‡∏®‡∏≤‡∏à
    /// ‡πÄ‡∏ä‡πà‡∏ô Paramecia ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô, Logia ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    switch (type) {
      case 'Paramecia':
        return Colors.blue;
      case 'Logia':
        return Colors.green;
      case 'Zoan':
        return Colors.orange;
      case 'Mythical Zoan':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  @override
  Widget build(BuildContext context) {
    return CustomScrollView(
      slivers: [
        // Header Section with Background Image
        SliverToBoxAdapter(
          child: Container(
            width: double.infinity,
            margin: const EdgeInsets.all(16),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(20),
              child: Stack(
                children: [
                  // ‡∏£‡∏π‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                  Image.asset(
                    'assets/home/Background.png',
                    width: double.infinity,
                    height: 150, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    fit: BoxFit.cover,
                  ),

                  // ‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÄ‡∏ö‡∏•‡∏≠
                  BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 2, sigmaY: 2),
                    child: Container(
                      width: double.infinity,
                      height: 150,
                      color: Colors.black.withOpacity(
                        0.4,
                      ), // ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                    ),
                  ),

                  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô
                  Padding(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      children: const [
                        Text(
                          'Devil Fruit Collection',
                          style: TextStyle(
                            fontSize: 23,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        SizedBox(height: 8),
                        // ‡πÄ‡∏û‡∏¥‡πà‡∏° widgets ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),

        // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Header ‡πÅ‡∏•‡∏∞ GridView
        const SliverToBoxAdapter(child: SizedBox(height: 8)),
        // Fruits Grid Section
        SliverPadding(
          padding: const EdgeInsets.all(16),
          sliver: SliverGrid(
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 0.85,
            ),
            delegate: SliverChildBuilderDelegate((context, index) {
              final fruit = fruits[index];
              return Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.2),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Emoji Icon
                    Container(
                      width: 60,
                      height: 60,
                      decoration: BoxDecoration(
                        color: getTypeColor(fruit['type']!).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(30),
                      ),
                      child: Center(
                        child: Text(
                          fruit['emoji']!,
                          style: const TextStyle(fontSize: 30),
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),
                    // Fruit Name
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8),
                      child: Text(
                        fruit['name']!,
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    const SizedBox(height: 8),
                    // Type Badge
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: getTypeColor(fruit['type']!),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        fruit['type']!,
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.white,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }, childCount: fruits.length),
          ),
        ),
      ],
    );
  }
}

class _MyHomePageState extends State<MyHomePage> {
  int _selectedIndex = 0;
  final List<Widget> _pages = [
    MyHomeContent(),
    const Favorites(),
    const Settings(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body:
          _pages[_selectedIndex], // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å *pages[*selectedIndex] ‡πÄ‡∏õ‡πá‡∏ô _pages[_selectedIndex] ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(
            icon: Icon(Icons.favorite),
            label: 'Favorites',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
      ),
    );
  }
}
